openapi: 3.0.3
info:
  title: Swagger chl-msa-customer - OpenAPI 3.0
  description: |-
    <div style="text-align: justify;">
      <h3>Challenge Develop - Banco Pichincha</h3>
      <p>This is a contract to manage customer data based on the OpenAPI 3.0 specification.This is a contract that uses the API First-Contract principle to standardize the creation of endpoints to be used in our service and improve the development of our APIs.</p>
    </div>
  termsOfService: http://swagger.io/terms/
  contact:
    email: clavijo-marcos@hotmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0 - SNAPSHOT

servers:
  - url: http://localhost:8080/api/v1
    description: service

paths:
  /customers:
    get:
      tags:
        - customer
      summary: Get all customers
      description: Retrieve a list of all customers
      operationId: getAllCustomers
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CustomerPersonResponse'
              examples:
                CustomerPersonResponse-ex1:
                  $ref: '#/components/examples/CustomerPersonResponse-ex1'
    post:
      tags:
        - customer
      summary: Create a new customer
      description: Create a new customer with an Unique ID
      operationId: createCustomer
      requestBody:
        description: Created customer object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerPerson'
            examples:
              CustomerPersonCreateRequest-ex1:
                $ref: '#/components/examples/CustomerPersonCreateRequest-ex1'
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerPersonResponse'
              examples:
                CustomerPersonCreateResponse-ex1:
                  $ref: '#/components/examples/CustomerPersonCreateResponse-ex1'
        '400':
          description: The server could not understand the request because of incorrect syntax
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                example1:
                  value:
                    title: Bad Request
                    detail: Invalid input
                    status: 400
  /customers/{id}:
    get:
      tags:
        - customer
      summary: Get customer by ID
      description: Retrieve a single customer by their ID
      operationId: getCustomerById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerPersonResponse'
              examples:
                CustomerPersonCreateResponse-ex1:
                  $ref: '#/components/examples/CustomerPersonCreateResponse-ex1'
        '404':
          description: Customer not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                example1:
                  value:
                    title: Not Found
                    detail: Customer not found
                    status: 404
    put:
      tags:
        - customer
      summary: Update an existing customer
      description: Update an existing customer by their ID
      operationId: updateCustomer
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        description: Updated customer object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerPerson'
            examples:
              CustomerPersonCreateRequest-ex1:
                $ref: '#/components/examples/CustomerPersonCreateRequest-ex1'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerPersonResponse'
              examples:
                CustomerPersonCreateResponse-ex1:
                  $ref: '#/components/examples/CustomerPersonCreateResponse-ex1'
        '404':
          description: Customer not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                example1:
                  value:
                    title: Not Found
                    detail: Customer not found
                    status: 404
    delete:
      tags:
        - customer
      summary: Delete a customer
      description: Delete a customer by their ID
      operationId: deleteCustomer
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: No Content
        '404':
          description: Customer not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                example1:
                  value:
                    title: Not Found
                    detail: Customer not found
                    status: 404
  /customers/identification/{identification}:
    get:
      tags:
        - customer
      summary: Get customer by identification
      description: Retrieve a single customer by their identification
      operationId: getCustomerByIdentification
      parameters:
        - name: identification
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerPersonResponse'
              examples:
                CustomerPersonCreateResponse-ex1:
                  $ref: '#/components/examples/CustomerPersonCreateResponse-ex1'
        '404':
          description: Customer not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                example1:
                  value:
                    title: Not Found
                    detail: Customer not found
                    status: 404
components:
  schemas:
    CustomerPerson:
      type: object
      properties:
        password:
          type: string
          minLength: 8
          maxLength: 20
        status:
          type: boolean
        name:
          type: string
          minLength: 1
          maxLength: 50
        gender:
          type: string
          enum:
            - masculino
            - femenino
        age:
          type: string
          pattern: '^\d+$'
          minLength: 1
          maxLength: 3
        identification:
          type: string
          pattern: '^\d+$'
          minLength: 1
          maxLength: 10
        address:
          type: string
          minLength: 1
          maxLength: 100
        phone:
          pattern: '^\d+$'
          type: string
          minLength: 10
          maxLength: 15
      required:
        - password
        - name
        - gender
        - age
        - identification
        - address
        - phone
    CustomerPersonResponse:
      type: object
      properties:
        person_id:
          type: string
        status:
          type: boolean
        name:
          type: string
        gender:
          type: string
        age:
          type: string
        identification:
          type: string
        address:
          type: string
        phone:
          type: string
    Error:
      type: object
      properties:
        title:
          type: string
        detail:
          type: string
        status:
          type: integer
  examples:
    CustomerPersonResponse-ex1:
      value:
        - status: true
          name: John Doe
          gender: masculino
          age: "30"
          identification: "1718018870"
          address: 123 Main St
          phone: "5551234567"
    CustomerPersonCreateRequest-ex1:
      value:
        password: password123
        status: true
        name: John Doe
        gender: masculino
        age: "30"
        identification: "1718018870"
        address: 123 Main St
        phone: "5551234567"
    CustomerPersonCreateResponse-ex1:
      value:
        status: true
        name: John Doe
        gender: masculino
        age: "30"
        identification: "1718018870"
        address: 123 Main St
        phone: "5551234567"